{"version":3,"sources":["assets/logo.svg","assets/github-background.svg","styles/global.ts","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","shade","Error","span","Repositories","div","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","repository","key","full_name","to","owner","avatar_url","login","description","size","color","Header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","Promise","all","repositoryResponse","issuesResponse","loadData","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87a6255b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-background.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin:0;\n    padding:0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #f0f0f5 url(${githubBackground}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n\n  max-width: 450px;\n  line-height: 56px;\n\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    border: 2px solid ${(props) => (props.hasError ? '#c53030' : '#fff')};\n    border-right: 0;\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04d361;\n    border: 0;\n    border-radius: 0 5px 5px 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background-color 0.3s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    transition: transform 0.2s;\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n    }\n  }\n`;\n","import React, { useState, FormEvent, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\n\nimport api from '../../services/api';\nimport logoImg from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GitHubExplorer:repositories',\n    );\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories);\n    }\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GitHubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do reposit贸rio');\n      return;\n    }\n\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n\n      setRepositories([...repositories, response.data]);\n      setInputError('');\n      setNewRepo('');\n    } catch (err) {\n      setInputError('Erro na busca por esse reposit贸rio');\n    }\n  }\n\n  return (\n    <>\n      <img src={logoImg} alt=\"GitHub Explorer\" />\n      <Title>Explore reposit贸rios no GitHub</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          value={newRepo}\n          onChange={(e) => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do reposit贸rio\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories>\n        {repositories.map((repository) => (\n          <Link\n            key={repository.full_name}\n            to={`/repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronRight size={20} color=\"#cbcbd6\" />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.3s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    transition: transform 0.2s;\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\n\nimport api from '../../services/api';\nimport logoImg from '../../assets/logo.svg';\n\nimport { Header, RepositoryInfo, Issues } from './styles';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    async function loadData(): Promise<void> {\n      const [repositoryResponse, issuesResponse] = await Promise.all([\n        api.get(`repos/${params.repository}`),\n        api.get(`repos/${params.repository}/issues`),\n      ]);\n\n      setRepository(repositoryResponse.data);\n      setIssues(issuesResponse.data);\n    }\n\n    loadData();\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"GitHub Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Start</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map((issue) => (\n          <a key={issue.id} href={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n\n            <FiChevronRight size={20} color=\"#cbcbd6\" />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <GlobalStyle />\n    <HashRouter>\n      <Routes />\n    </HashRouter>\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}